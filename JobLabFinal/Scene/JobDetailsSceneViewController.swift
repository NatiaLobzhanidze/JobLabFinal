//
//  JobDetailsSceneViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 15.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol JobDetailsSceneDisplayLogic: AnyObject {
    func displayJobDetails(viewModel: JobDetailsScene.ShowDetails.ViewModel)

}

class JobDetailsSceneViewController: UIViewController {
    // MARK: Clean components

  var interactor: JobDetailsSceneBusinessLogic?
  var router: (JobDetailsSceneRoutingLogic & JobDetailsSceneDataPassing)?

    // MARK: View

    let jobTopView: UIView = {
        let v = UIView()
        v.backgroundColor = .white
        v.layer.cornerRadius = 20
        v.layer.borderWidth = 0.6
        v.layer.borderColor = UIColor.tintColor.cgColor
        return v
    }()

    let logoImage = UIImageView()
    let jobTitle: UILabel = {
        let lb = UILabel()
        lb.font = .monospacedDigitSystemFont(ofSize: 20, weight: .semibold)
        return lb
    }()
    let employer = UILabel()
    let salary: UILabel = {
        let lb = UILabel()
        return lb

    }()
    let jobType = UILabel()
    let location = UILabel()

    let tableView: UITableView = {
        let v = UITableView()
        v.showsVerticalScrollIndicator = false
        return v
    }()

    let requirementArray = JobDetailsScene.Requirements.requirements

  // MARK: Object lifecycle
  init(interactor: JobDetailsSceneBusinessLogic, router: (JobDetailsSceneRoutingLogic & JobDetailsSceneDataPassing)) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
  }

  // MARK: View lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
      view.backgroundColor = .white
      title = "Job Details"

      interactor?.getDetails(request: JobDetailsScene.ShowDetails.Request())
      tableView.registerClass(class: RequirementsTableViewCell.self)
      tableView.delegate = self
      tableView.dataSource = self
      setUpView()
  }

  // MARK: private methods

    private func setUpView() {
        view.addSubview(jobTopView)
        jobTopView.anchor(top: view.safeAreaLayoutGuide.topAnchor, left: view.leftAnchor, right: view.rightAnchor, paddingTop: 20, paddingLeft: 40,   paddingRight: 40, height: 120)

        jobTopView.addSubview(logoImage)
        logoImage.anchor(top: jobTopView.topAnchor, left: jobTopView.leftAnchor, bottom: jobTopView.bottomAnchor,   paddingTop: 20, paddingLeft: 20, paddingBottom: 20,   width: 80)
        let topViewStackView = UIStackView(arrangedSubviews: [jobTitle, employer])
        topViewStackView.axis = .vertical
        topViewStackView.alignment = .center
        topViewStackView.distribution = .fill
        jobTopView.addSubview(topViewStackView)
        topViewStackView.anchor(top: logoImage.topAnchor, left: logoImage.rightAnchor, bottom: logoImage.bottomAnchor, right: jobTopView.rightAnchor, paddingTop: 0, paddingLeft: 20, paddingBottom: 0, paddingRight: 10)
        let detailsViewStackview = UIStackView(arrangedSubviews: [horizontalStackview(lable: "Salary", value: salary), horizontalStackview(lable: "Type", value: jobType), horizontalStackview(lable: "Location", value: location)])
        detailsViewStackview.axis = .vertical
        detailsViewStackview.distribution = .fillEqually
        detailsViewStackview.addBorders(to: [.top, .bottom], in: .lightGray, width: 1)
        view.addSubview(detailsViewStackview)
        detailsViewStackview.anchor(top: jobTopView.bottomAnchor, left: jobTopView.leftAnchor, right: jobTopView.rightAnchor, paddingTop: 25, paddingLeft: 0, paddingRight: 0,   height: 130)
        let titleLabel = UILabel()
        titleLabel.text = "Requirements"
        titleLabel.font = .systemFont(ofSize: 23, weight: .semibold)
        view.addSubview(titleLabel)
        titleLabel.anchor(top: detailsViewStackview.bottomAnchor, left: detailsViewStackview.leftAnchor, paddingTop: 20, paddingLeft: 0, height: 35)
        view.addSubview(tableView)
        tableView.anchor(top: titleLabel.bottomAnchor, left: view.leftAnchor, bottom: view.bottomAnchor, right: view.rightAnchor, paddingTop: 0, paddingLeft: 20, paddingBottom: 10, paddingRight: 20)
    }

    private func horizontalStackview(lable: String, value: UILabel) -> UIStackView {
        let titleLabel = UILabel()
        titleLabel.text = lable
        titleLabel.font = .systemFont(ofSize: 15, weight: .medium)
        titleLabel.textColor = .darkGray
        value.textColor = .tintColor
        value.font = .systemFont(ofSize: 15, weight: .semibold)
        let stackview = UIStackView(arrangedSubviews: [titleLabel, value])
        stackview.axis = .horizontal
        stackview.distribution = .fill
        return stackview
    }
}

// MARK: Displaylogics

extension JobDetailsSceneViewController: JobDetailsSceneDisplayLogic {
    func displayJobDetails(viewModel: JobDetailsScene.ShowDetails.ViewModel) {
        let model = viewModel.data
        guard let myUrl =  URL(string: model.logoImage) else { return }
        self.logoImage.load(url: myUrl)
        self.employer.text  = model.brand
        self.jobTitle.text = model.jobTitle
        self.salary.text = "\( model.sallary)"
        self.jobType.text = model.jobType
        self.location.text = model.location
    }
}

extension JobDetailsSceneViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        requirementArray.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.deque(class: RequirementsTableViewCell.self, for: indexPath)
        cell.requirementsText.text = requirementArray[indexPath.row]

        cell.layer.cornerRadius = 20
        return cell
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
}
