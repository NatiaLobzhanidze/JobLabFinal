//
//  OnBoardingViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 31.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OnBoardingDisplayLogic: AnyObject
{
    func displayBanners(viewModel: OnBoarding.GetOnBoardingData.ViewModel)
    func displayLogInScene(viewModel: OnBoarding.GoToLogInSccen.ViewModel)
}

final class OnBoardingViewController: UIViewController
{
    //MARK: Clean components
    
    var interactor: OnBoardingBusinessLogic?
    var router: ( OnBoardingRoutingLogic & OnBoardingDataPassing)?
    
    //MARK: View
    
    private lazy var collectionView: UICollectionView = {
        let sm = CustomCollectionViewConfiguration.shared.customCollectionView(direction: .horizontal, itemSize: CGSize(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height / 1.5))
        sm.delegate = self
        sm.dataSource = self
        return sm
    }()
    
    let skipButton: UIButton = {
        let btn = UIButton()
        btn.setTitle("Skip", for: .normal)
        btn.setTitleColor(.blue, for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 14)
        btn.addTarget(self, action: #selector(skipBtn), for: .touchUpInside)
        
        return btn
    }()
    
    let nextButtom: UIButton = {
        let btn = UIButton()
        btn.setTitle("Next", for: .normal)
        btn.setTitleColor(.blue, for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 14)
        btn.addTarget(self,
                      action: #selector(nextPage), for: .touchUpInside)
        return btn
    }()
    
    let pageControll: UIPageControl = {
        let mypageControl = UIPageControl()
        mypageControl.pageIndicatorTintColor = .darkGray
        mypageControl.currentPageIndicatorTintColor = .tintColor
        mypageControl.numberOfPages = 3
        mypageControl.contentHorizontalAlignment = .left
        mypageControl.addTarget(self, action: #selector(pageControllerAction(_:collectionView:)), for: .touchUpInside)
        return mypageControl
    }()
    
    //MARK: Properties
    
    private(set) var dataSource = [OnBoardingModel]()
    var currentPage: Int = 0 {
        didSet {
            pageControll.currentPage = currentPage
            if currentPage == dataSource.count - 1 {
                nextButtom.setTitle("Get Start", for: .normal)
            } else {
                nextButtom.setTitle("Next", for: .normal)
            }
        }
    }
    
    // MARK: Object lifecycle
    
    init(interactor: OnBoardingBusinessLogic, router: OnBoardingRoutingLogic & OnBoardingDataPassing ) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        view.backgroundColor = .white
        interactor?.getBanners(request: OnBoarding.GetOnBoardingData.Request())
        setUpCView()
    }
    
    // MARK: SetupView
    
    private func setUpCView() {
        
        view.addSubview(skipButton)
        skipButton.anchor(top: view.safeAreaLayoutGuide.topAnchor, left: view.leftAnchor, paddingTop: 10, paddingLeft: 20,  width: 70, height: 50)
        view.addSubview(nextButtom)
        nextButtom.anchor(top: skipButton.topAnchor, right: view.rightAnchor, paddingTop: 0,   paddingRight: 10, width: 100, height: 50)
        view.addSubview(self.collectionView)
        collectionView.anchor(top: skipButton.bottomAnchor, left: view.leftAnchor, right: view.rightAnchor, paddingTop: 30, paddingLeft: 0, paddingRight: 0, height: 450)
        collectionView.registerClass(class: OnBoardingCollectionViewCell.self)
        view.addSubview(pageControll)
        pageControll.anchor(top: collectionView.bottomAnchor, bottom: view.bottomAnchor, paddingTop: 30,  paddingBottom: 20,  width: 120, height: 45)
        pageControll.centerXAnchor.constraint(equalTo: view.centerXAnchor, constant: 0).isActive = true
    }
    
    //MARK: Private Methods
    private func setTableData(data: [OnBoardingModel]) {
        self.dataSource = data
        collectionView.reloadData()
    }
    private func changePage (on collectionView: UICollectionView){
        if currentPage == dataSource.count - 1  {
            interactor?.getLogInScene(reequest: OnBoarding.GoToLogInSccen.Request())
        } else {
            collectionView.isPagingEnabled = false
            currentPage += 1
            let indexPath = IndexPath(item: currentPage, section: 0)
            collectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
            collectionView.reloadData()
            collectionView.isPagingEnabled = true
        }
    }
    
    //MARK: @objc Methods
    
    @objc func skipBtn() {
        interactor?.getLogInScene(reequest: OnBoarding.GoToLogInSccen.Request())
    }
    @objc func nextPage() {
        changePage(on: self.collectionView)
    }
    @objc func pageControllerAction(_ sender: UIPageControl, collectionView: UICollectionView) {
        let page: Int = sender.currentPage
        print(page)
        collectionView.scrollToItem(at: IndexPath(row: page, section: 0), at: .centeredHorizontally, animated: true)
        changePage(on: collectionView)
    }
}

//MARK: DisplayLogic Methods

extension OnBoardingViewController: OnBoardingDisplayLogic {
    func displayLogInScene(viewModel: OnBoarding.GoToLogInSccen.ViewModel) {
        router?.navigateToAuthentication()
    }
    
    func displayBanners(viewModel: OnBoarding.GetOnBoardingData.ViewModel) {
        setTableData(data: viewModel.tableData)
    }
}

//MARK: COllectionView DataSource Methods

extension OnBoardingViewController : UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        dataSource.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.deque(OnBoardingCollectionViewCell.self, for: indexPath)
        cell.configure(with: dataSource[indexPath.row])
        return cell
    }
}
//MARK: Collectionview Delegate/FlowLayout Methods

extension OnBoardingViewController: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    private func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.width, height: collectionView.frame.height - 100)
    }
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        let width = scrollView.frame.width
        currentPage = Int(scrollView.contentOffset.x) / Int(width)
        pageControll.currentPage = currentPage
    }
}
