//
//  HomeSceneViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 07.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeSceneDisplayLogic: AnyObject
{
    func displayTips(viewModel: HomeScene.GetTips.ViewModel)
    func displayAllTipsScene(viewModel: HomeScene.ShowAllTips.ViewModel)
}

class HomeSceneViewController: UIViewController
{
  
  var interactor: HomeSceneBusinessLogic?
  var router: (HomeSceneRoutingLogic & HomeSceneDataPassing)?
    private var dataSource = [TipsModel]()
    
   //MARK: UI Elements
    
    
    let mySearchBar: UISearchBar = {
        let sr = UISearchBar()
        sr.searchBarStyle = UISearchBar.Style.minimal
        sr.placeholder = " Search..."
        sr.sizeToFit()
        sr.isTranslucent = false
        
        
        return sr
    }()
    let listButton: UIButton = {
        let btn = UIButton()
        btn.setImage(UIImage(systemName: "line.3.horizontal.decrease"), for: .normal)
        btn.setTitleColor(.tintColor, for: .normal)
       
        return btn
    }()
    
    let tableView: UITableView = {
        let v = UITableView()
        v.backgroundColor = .red
        
        v.separatorStyle = .none
        return v
    }()
    
    // MARK: Object lifecycle
    
    init(interactor: HomeSceneBusinessLogic, router: (HomeSceneRoutingLogic & HomeSceneDataPassing)) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      view.backgroundColor = .white
      title = "Hello, Natia"
      mySearchBar.delegate = self
      interactor?.getTips(request: HomeScene.GetTips.Request())
      setUpTableView()
  }
  //MARK: @objC methods
    
  
    
  // MARK: Private methods
    
    private func setTableData(data: [TipsModel]) {
        self.dataSource = data
        tableView.reloadData()
    }
    
    // MARK: Setup
    
    private func setUpTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.registerClass(class: FirstTableViewCell.self)
        tableView.registerClass(class: TipsTableViewCell.self)
        tableView.registerClass(class: JobListTableViewCell.self)
        tableView.registerClass(class: FilterTableViewCell.self)
        setUpViews()
        tableView.reloadData()
    }
    
   private func setUpViews() {
        view.addSubview(mySearchBar)
        mySearchBar.anchor(top: view.safeAreaLayoutGuide.topAnchor, left: view.leftAnchor,  paddingTop: 10, paddingLeft: 20, height: 40)
       view.addSubview(listButton)
       listButton.anchor(top: view.safeAreaLayoutGuide.topAnchor, left: mySearchBar.rightAnchor , right: view.rightAnchor,paddingTop: 10,paddingLeft: 0, paddingRight: 20 , width: 50, height: 50)
        view.addSubview(tableView)
        tableView.anchor(top: mySearchBar.bottomAnchor, left: view.leftAnchor, bottom: view.bottomAnchor, right: view.rightAnchor, paddingTop: 20, paddingLeft: 0, paddingBottom: 0, paddingRight: 0)
        
    }
  
}
extension HomeSceneViewController: OpenAllTipsScene {
    
    func passData() {
        
        self.interactor?.didTapSeeAllTips(request: HomeScene.ShowAllTips.Request(data: dataSource))
    }
    
}
extension HomeSceneViewController : UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
    }
}
extension HomeSceneViewController: HomeSceneDisplayLogic {
    
    func displayAllTipsScene(viewModel: HomeScene.ShowAllTips.ViewModel) {
        
        router?.navigateToAllTipsListScene()
    }
    
   
    
    func displayTips(viewModel: HomeScene.GetTips.ViewModel) {
        DispatchQueue.main.async {[weak self] in
            self?.setTableData(data: viewModel.data)
        }
    }
}

extension HomeSceneViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0, 2:
             return 50
        case 1:
             return 220
        case 3:
            return 80
        default:
          return 120
        }
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        5
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
      return 1
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        switch indexPath.section {
        case 0 :
            let cell = tableView.deque(class: FirstTableViewCell.self, for: indexPath)
            cell.textlb.text = "Tips for you"
            cell.delegate = self
            cell.forPassData = dataSource
            cell.selectionStyle = .none
            return cell
        case 1 :
            let cell = tableView.deque(class: TipsTableViewCell.self, for: indexPath)
            cell.tipsArray = dataSource
            return cell
        case 2:
            let cell = tableView.deque(class: FirstTableViewCell.self, for: indexPath)
            cell.textlb.text = "Job recomendation"
            cell.selectionStyle = .none
            return cell
        case 3:
            let cell = tableView.deque(class: FilterTableViewCell.self, for: indexPath)
        
            return cell
        case 4:
            let cell = tableView.deque(class: JobListTableViewCell.self, for: indexPath)
            cell.configureCell(with: JobModel(logoImage: "job1", brand: "Motus Line", jobTitle: " Transportation Manager", location: "Tbilisi, Georgia", jobType: "Full time", sallary: 1200, isFavorite: false))
        
            return cell
        default:
            fatalError("error while cell return")
        }
    }
}
