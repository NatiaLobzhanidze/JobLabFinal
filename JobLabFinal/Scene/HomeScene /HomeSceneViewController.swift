//
//  HomeSceneViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 07.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeSceneDisplayLogic: AnyObject
{
    func displayTips(viewModel: HomeScene.GetTips.ViewModel)
    func displayJobs(viewModel: HomeScene.Getjobs.ViewModel)
    func displayTipDetails(viewModel: HomeScene.SeeDetails.ViewModel)
    func displayAllTipsScene(viewModel: HomeScene.ShowAllTips.ViewModel)
    func displayAllJobsScene(viewModel: HomeScene.ShowAllJobs.ViewModel)
    func displayFilteredJobs(viewModel: HomeScene.FilterJobs.ViewModel)
    func displaySelectedJobDetails(viewModel: HomeScene.SeeJobDetails.ViewModel)
    func displayJobsBycategory(viewModel: HomeScene.FilterJobs.ViewModel)
}

class HomeSceneViewController: UIViewController
{
  
    var interactor: HomeSceneBusinessLogic?
    var router: (HomeSceneRoutingLogic & HomeSceneDataPassing)?
    
    private var dataSource = [TipsModel]()
    private var jobsDataSource = [JobModel]()
    private var selectedtip: TipsModel!
    
   //MARK: View

    let mySearchBar: UISearchBar = {
        let sr = UISearchBar()
   
        sr.searchBarStyle = .minimal
        sr.backgroundColor = .clear
        sr.searchTextField.backgroundColor = .clear
        sr.barTintColor = .clear
        sr.placeholder = " Search job ..."
        sr.returnKeyType = .search
        sr.sizeToFit()
    
        return sr
    }()
    
    let tableView: UITableView = {
        let v = UITableView()
        v.separatorStyle = .none
        return v
    }()
    
    // MARK: Object lifecycle
    
    init(interactor: HomeSceneBusinessLogic, router: (HomeSceneRoutingLogic & HomeSceneDataPassing)) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
  // MARK: View lifecycle
  
    override func viewDidLoad() 
  {
      super.viewDidLoad()
      view.backgroundColor = .white
      title = "Hello, Natia"
      
      mySearchBar.delegate = self
      setUpTableView()
      interactor?.getTips(request: HomeScene.GetTips.Request())
      getdt()
     
    
  }
    func getdt() {
        Task {
            await interactor?.getJobs(request: HomeScene.Getjobs.Request())
        }
    }
  // MARK: Private methods
  
    private func setTipsTableData(data: [TipsModel]) {
        self.dataSource = data
        tableView.reloadData()
    }
    
    private func setJobsTableData(data: [JobModel]) {
        self.jobsDataSource = data
        tableView.reloadData()
    }
    
    // MARK: Setup
    
    private func setUpTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.registerClass(class: FirstTableViewCell.self)
        tableView.registerClass(class: TipsTableViewCell.self)
        tableView.registerClass(class: SeeAllJobsTableViewCell.self)
        tableView.registerClass(class: JobsTableViewCell.self)
        tableView.registerClass(class: FilterTableViewCell.self)
        setUpViews()
        tableView.reloadData()
    }
    
   private func setUpViews() {
       view.addSubview(mySearchBar)
       mySearchBar.anchor(top: view.safeAreaLayoutGuide.topAnchor,
                          left: view.leftAnchor,
                         
                          right: view.rightAnchor,
                          paddingTop: 0, paddingLeft: 20,  paddingRight: 20,height: 40)
        view.addSubview(tableView)
        tableView.anchor(top: mySearchBar.bottomAnchor, left: view.leftAnchor, bottom: view.bottomAnchor, right: view.rightAnchor, paddingTop: 10, paddingLeft: 10, paddingBottom: 0, paddingRight: 10)
    }
}

//MARK: Delegate/Protocols

extension HomeSceneViewController: OpenAllTipsScene {
    
    func passData() {
        self.interactor?.didTapSeeAllTips(request: HomeScene.ShowAllTips.Request(data: dataSource))
    }
}
extension HomeSceneViewController: SendDelegatTovc {
  
    func passDataToVc(with title: String) {
        guard let tipObject =  self.dataSource.filter({$0.title == title }).first else { return }
        self.interactor?.seeTipsDetails(request: HomeScene.SeeDetails.Request(tip: tipObject))
    }
}
extension HomeSceneViewController: SeeAllJobsDelegate {
    func didTapSeeALL() {
        self.interactor?.didTapSeeAllJobs(request: HomeScene.ShowAllJobs.Request())
    }
}
extension HomeSceneViewController: SelsectJobDelegateProtocol {
    func selectJob(data: JobModel) {
        self.interactor?.seeJobDetails(request: HomeScene.SeeJobDetails.Request(job: data))
    }
}
extension HomeSceneViewController: FilterByCategoryDelegate {
    func filterByCategory(with title: String) {
        self.interactor?.filterJobsByCategory(request: HomeScene.FilterJobs.Request(keyword: title))
    }
}

//MARK: SearchBar Methods

extension HomeSceneViewController : UISearchBarDelegate {
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
            searchBar.showsCancelButton = true
      }
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
       
        guard let text = searchBar.text else { return }
        self.interactor?.getFilteredJobs(request: HomeScene.FilterJobs.Request(keyword: text))
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = nil
        searchBar.showsCancelButton = false
        searchBar.endEditing(true)
        self.getdt()
    }
}


//MARK: display logic methods

extension HomeSceneViewController: HomeSceneDisplayLogic {
    func displayJobsBycategory(viewModel: HomeScene.FilterJobs.ViewModel) {
        self.setJobsTableData(data: viewModel.data)
        self.tableView.reloadData()
    }
    
    func displaySelectedJobDetails(viewModel: HomeScene.SeeJobDetails.ViewModel) {
        router?.navigateToJobDetailsScene()
    }
    
    func displayFilteredJobs(viewModel: HomeScene.FilterJobs.ViewModel) {
        self.setJobsTableData(data: viewModel.data)
        self.tableView.reloadData()
    }
    
    
    func displayJobs(viewModel: HomeScene.Getjobs.ViewModel) {
        DispatchQueue.main.async {[weak self] in
            self?.setJobsTableData(data: viewModel.data)
        }
    }
    func displayAllJobsScene(viewModel: HomeScene.ShowAllJobs.ViewModel) {
        router?.navigateToAllJobsScene()
    }
    
    
    func displayAllTipsScene(viewModel: HomeScene.ShowAllTips.ViewModel) {
        router?.navigateToAllTipsListScene()
    }
    
    func displayTips(viewModel: HomeScene.GetTips.ViewModel) {
        DispatchQueue.main.async {[weak self] in
            self?.setTipsTableData(data: viewModel.data)
        }
    }
    
    func displayTipDetails(viewModel: HomeScene.SeeDetails.ViewModel) {
        router?.navigateToDetailsScene()
       
    }
}

//MARK: Tableview delegate, dataSource protocol methods

extension HomeSceneViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.section {
        case 0, 2:
             return 30
        case 1:
             return 170
        case 3:
            return 60
        default:
          return 350
        }
       
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        5
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
      return 1
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        switch indexPath.section {
        case 0 :
            let cell = tableView.deque(class: FirstTableViewCell.self, for: indexPath)
            cell.textlb.text = "Tips for you"
            cell.delegate = self
            cell.selectionStyle = .none
            return cell
        case 1 :
            let cell = tableView.deque(class: TipsTableViewCell.self, for: indexPath)
            cell.delegate = self
            cell.tipsArray = dataSource
            print("indexpath is ", indexPath)
            return cell
        case 2:
            let cell = tableView.deque(class: SeeAllJobsTableViewCell.self, for: indexPath)
            cell.delegate = self
            cell.selectionStyle = .none
            return cell
        case 3:
            let cell = tableView.deque(class: FilterTableViewCell.self, for: indexPath)
            cell.fillCategories(from: jobsDataSource)
            cell.delegate = self
            return cell
        case 4:
            let cell = tableView.deque(class: JobsTableViewCell.self, for: indexPath)
                cell.jobsConteiner = jobsDataSource
            cell.delegate = self
            return cell
        default:
            fatalError("error while cell return")
        }
    }
}

