//
//  HomeSceneInteractor.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 07.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeSceneBusinessLogic {
    
    func didTapSeeAllTips(request: HomeScene.ShowAllTips.Request)
    func seeTipsDetails(request: HomeScene.SeeDetails.Request )
    func seeJobDetails(request: HomeScene.SeeJobDetails.Request)
    func didTapSeeAllJobs(request: HomeScene.ShowAllJobs.Request)
    func getFilteredJobs(request: HomeScene.FilterJobs.Request)
    func filterJobsByCategory(request: HomeScene.FilterJobs.Request)
    func getCommonModel(request: HomeScene.GetCommonModel.Request)
    func getFavorites(request: HomeScene.FavoriteCell.Request)
}

protocol HomeSceneDataStore {
    var passingData: [TipsModel] { get }
    var selectedTip: TipsModel? { get }
    var passingJob: [JobModel] { get }
    var selectedJob: JobModel? { get }
    var slectedCategories: [String] { get }
}

final class HomeSceneInteractor: HomeSceneDataStore {
    
    //MARK: Clean components
    
    var presenter: HomeScenePresentationLogic?
    var worker: HomeSceneWorker
    
    //MARK: Fields
    
    var tips = [TipsModel]()
    var currentData: [TipsModel]?
    var fetchedJobs = [JobModel]()
    
    var selectedTip: TipsModel?
    var selectedJob: JobModel?
    
    var passingData = [TipsModel]()
    var passingJob = [JobModel]()
    var slectedCategories: [String]
    var favoritsConteiner = [JobModel]()
    
    // MARK: Object Lifecycle
    
    init(presenter: HomeScenePresentationLogic, worker: HomeSceneWorker, slectedCategories: [String] ) {
        self.presenter = presenter
        self.worker  = worker
        self.slectedCategories = slectedCategories
    }
}

extension HomeSceneInteractor:  HomeSceneBusinessLogic {
  
    
    func getFavorites(request: HomeScene.FavoriteCell.Request) {
        let response =  worker.fetchFavorites()
        let resResponse = response.compactMap({$0})
        presenter?.presentFavorites(response: HomeScene.FavoriteCell.Response(data: resResponse))
    }
    
    func filterJobsByCategory(request: HomeScene.FilterJobs.Request) {
        let keyword = request.keyword.lowercased()
        let filteredJobs = passingJob.filter{$0.category.lowercased() == keyword}
        let data = keyword == "all jobs" ? passingJob : filteredJobs
        presenter?.presentjobsByCategory(response: HomeScene.FilterJobs.Response(data: data))
    }
    
    func seeJobDetails(request: HomeScene.SeeJobDetails.Request) {
        self.selectedJob = request.job
        presenter?.presentSelectedJobDetails(response: HomeScene.SeeJobDetails.Response())
    }
    
    func getFilteredJobs(request: HomeScene.FilterJobs.Request) {
        let keyword = request.keyword.lowercased()
        let filteredJobs = passingJob.filter({$0.jobTitle.lowercased().contains(keyword)})
        let data = keyword.isEmpty ? passingJob : filteredJobs
        presenter?.presentFilteredJobs(response: HomeScene.FilterJobs.Response(data: data))
    }
    
    func didTapSeeAllJobs(request: HomeScene.ShowAllJobs.Request) {
        presenter?.presentAllJobs(response: HomeScene.ShowAllJobs.Response(data: passingJob))
    }
    
    func seeTipsDetails(request: HomeScene.SeeDetails.Request) {
        guard let tipObject =  request.dataSource.filter({$0.title == request.tipTitle }).first else { return }
        self.selectedTip = tipObject
        presenter?.presnetTipsDetails(response: HomeScene.SeeDetails.Response())
    }
    
    func didTapSeeAllTips(request: HomeScene.ShowAllTips.Request) {
        self.passingData = tips
        presenter?.presentAllTips(response: HomeScene.ShowAllTips.Response())
    }
    
    //MARK: NetworkCall
    
    func getCommonModel(request: HomeScene.GetCommonModel.Request) {
        Task {
            let category = slectedCategories
            do {
                let jobResponse = try await worker.fetchAllJobs()
                let tipsResponse = try await worker.fetchTips()
                let filteredResponse = jobResponse.filter {category.contains($0.category)}
                DispatchQueue.main.async { [weak self] in
                    self?.passingJob = jobResponse
                    self?.tips = tipsResponse
                    self?.presenter?.presentCommomModel(response: HomeScene.GetCommonModel.Response(data: CommonModel(jobs: filteredResponse, tips: tipsResponse)))
                }
                
            } catch {
                fatalError(error.localizedDescription)
            }
        }
    }
}


