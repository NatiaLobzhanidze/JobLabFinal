//
//  HomeSceneInteractor.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 07.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeSceneBusinessLogic
{
    func getTips(request: HomeScene.GetTips.Request)
    func getJobs(request: HomeScene.Getjobs.Request) async
    
    func didTapSeeAllTips(request: HomeScene.ShowAllTips.Request)
    func seeTipsDetails(request: HomeScene.SeeDetails.Request )
    func seeJobDetails(request: HomeScene.SeeJobDetails.Request)
    func didTapSeeAllJobs(request: HomeScene.ShowAllJobs.Request)
    func getFilteredJobs(request: HomeScene.FilterJobs.Request)
    
    func filterJobsByCategory(request: HomeScene.FilterJobs.Request)
}

protocol HomeSceneDataStore
{
    var passingData: [TipsModel] { get }
    var selectedTip: TipsModel? { get }
    var passingJob: [JobModel] { get }
    var selectedJob: JobModel? { get }
}

class HomeSceneInteractor: HomeSceneDataStore
{
    // MARK: Clean components
    
    var presenter: HomeScenePresentationLogic?
    var worker: HomeSceneWorker
    
    //MARK: Models Array
    
    var tips = [TipsModel]()
    var currentData: [TipsModel]?
    var fetchedJobs = [JobModel]()
    
    var selectedTip: TipsModel?
    var selectedJob: JobModel?
    
    var passingData = [TipsModel]()
    var passingJob = [JobModel]()
    
    // MARK: Object Lifecycle
    
    init(presenter: HomeScenePresentationLogic, worker: HomeSceneWorker ) {
        self.presenter = presenter
        self.worker  = worker
    }
}

extension HomeSceneInteractor:  HomeSceneBusinessLogic {
    func filterJobsByCategory(request: HomeScene.FilterJobs.Request) {
        let keyword = request.keyword.lowercased()
        if keyword == "all jobs" {
            presenter?.presentjobsByCategory(response: HomeScene.FilterJobs.Response(data: passingJob))
        } else {
            
            let filteredJobs = passingJob.filter{$0.category.lowercased() == keyword}
            presenter?.presentjobsByCategory(response: HomeScene.FilterJobs.Response(data: filteredJobs))
        }
        
    }
    
  
    
    func seeJobDetails(request: HomeScene.SeeJobDetails.Request) {
        self.selectedJob = request.job
        presenter?.presentSelectedJobDetails(response: HomeScene.SeeJobDetails.Response())
    }
    
    
    func getFilteredJobs(request: HomeScene.FilterJobs.Request) {
        let keyword = request.keyword.lowercased()
        let filteredJobs = passingJob.filter({$0.jobTitle.lowercased().contains(keyword) })
        if keyword != "" {
            presenter?.presentFilteredJobs(response: HomeScene.FilterJobs.Response(data: filteredJobs))
        } else {
            presenter?.presentFilteredJobs(response: HomeScene.FilterJobs.Response(data: passingJob))
        }
        
    }
    
    func didTapSeeAllJobs(request: HomeScene.ShowAllJobs.Request) {
        presenter?.presentAllJobs(response: HomeScene.ShowAllJobs.Response(data: passingJob))
    }
    
    func seeTipsDetails(request: HomeScene.SeeDetails.Request) {
        self.selectedTip = request.tip
        presenter?.presnetTipsDetails(response: HomeScene.SeeDetails.Response())

    }
    func didTapSeeAllTips(request: HomeScene.ShowAllTips.Request) {
        self.passingData = tips
        presenter?.presentAllTips(response: HomeScene.ShowAllTips.Response())
    }
    
     //MARK: NetworkCall
    
    func getJobs(request: HomeScene.Getjobs.Request) async {
        do {
        let jobResponse = try await worker.fetchAllJobs()
        DispatchQueue.main.async { [weak self] in
            self?.passingJob = jobResponse
            self?.presenter?.presentFetchedJobs(response: HomeScene.Getjobs.Response(data: jobResponse))
    
        
        } } catch {
            print(error)
        }
        
    }
    func getTips(request: HomeScene.GetTips.Request) {
        Task {
            do {
                let tipsResponse = try await worker.fetchTips()
                DispatchQueue.main.async { [weak self] in
                    self?.tips = tipsResponse
                    self?.presenter?.presentTipsData(response: HomeScene.GetTips.Response(data: tipsResponse))
                }
            } catch {
                print(error.localizedDescription)
            }
        }
    }
    
 
}
