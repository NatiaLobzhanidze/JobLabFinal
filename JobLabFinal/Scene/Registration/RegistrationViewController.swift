//
//  RegistrationViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationDisplayLogic: AnyObject {
    func displayCreatingSuccess(message: String)
    func displayCreatingFailure(message: String)
    func tryCreateUser(viewModel: Registration.CreateUser.ViewModel)
    func goToLogInPage(vieModel: Registration.GoToLogIn.ViewModel)
}

final class RegistrationViewController: BaseViewController {
    
    //MARK: Clean Components
    
    var interactor: RegistrationBusinessLogic
    var router: (RegistrationRoutingLogic & RegistrationDataPassing)
    
    // MARK: UI
    
    let scrollView : UIScrollView  = {
        let view = UIScrollView()
        view.isScrollEnabled = true
        return view
    }()
    
    let contentView = UIView()
    
    let confirmePasswordLb: UILabel = {
        let lb = UILabel()
        lb.addRequiredAsterisk(text: TextFieldsTitles.confirmPasswordAsterisk.rawValue)
        lb.font = .systemFont(ofSize: 14, weight: .semibold)
        return lb
    }()
    
    let repeatePasswordtxFld: UITextField = {
        let txt = UITextField()
        txt.placeholder = TextFieldsTitles.confirmPassword.rawValue
        txt.format()
        txt.shadowedField()
        txt.addPaddingToTextField()
        txt.isSecureTextEntry = true
        
        return txt
    }()
    
    // MARK: Object lifecycle
    
    init(interactor: RegistrationBusinessLogic, router: (RegistrationRoutingLogic & RegistrationDataPassing ) ){
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpView()
    }
    
    //MARK: private Methods
    
    private func setUpBaseVcUI() {
        
        mainBtn.setTitle(AuthorizationKeys.signUp.rawValue, for: .normal)
        mainBtn.setTitleColor(.white, for: .normal)
        mainBtn.addTarget(self, action: #selector(createAccount), for: .touchUpInside)
        bottomBtn.setTitle(AuthorizationKeys.logIn.rawValue, for: .normal)
        bottomBtn.addTarget(self, action: #selector(goToLogIn), for: .touchUpInside)
        donthaveAn.text = AuthorizationKeys.doyouHave.rawValue
    }
    
    private func setUpView() {
        view.backgroundColor = .white
        setUpBaseVcUI()
        let textFieldsArr: [UITextField] = [emailTxFld, passwordTxFld, repeatePasswordtxFld]
        let labelarr: [UILabel]  = [emailLb,
                                    passwordLb,
                                    headLineLb,
                                    orContinueLb,
                                    donthaveAn,
                                    confirmePasswordLb]
        let btnArr: [UIButton] = [mainBtn,fbBtn, googleBtn, bottomBtn]
        
        addConstreintsToScrollView(scrollView: self.scrollView, contentView: self.contentView)
        addConstraintsToImage(contentView: self.contentView, logoImage: self.logoImage)
        addHeadLine(contentView: self.contentView, headLineLb: self.headLineLb, logoImage: self.logoImage)
        addStackviews(textLb: labelarr, textFld: textFieldsArr, btn: btnArr, contentView: self.contentView)
    }
    
    // MARK: @objc Methods
    
    @objc func createAccount() {
    interactor.createAccount(request: Registration.CreateUser.Request(mailTextField: emailTxFld, passwordTexfield: passwordTxFld, checkPassword: repeatePasswordtxFld))
    }
    
    @objc func goToLogIn() {
        interactor.goToLogInPage(request: Registration.GoToLogIn.Request())
    }
}

//MARK: DipslayLogics

extension RegistrationViewController : RegistrationDisplayLogic {
    func goToLogInPage(vieModel: Registration.GoToLogIn.ViewModel) {
        router.navigateToLogInPage()
    }
    
    func displayCreatingSuccess(message: String) {
        self.showAlert(alertText: "Error", alertMessage: message, addActionTitle: "Ok")
    }
    
    func displayCreatingFailure(message: String) {
        self.showAlert(alertText: "Error", alertMessage: message, addActionTitle: "Ok")
    }
    
    func tryCreateUser(viewModel: Registration.CreateUser.ViewModel) {
    }
}
