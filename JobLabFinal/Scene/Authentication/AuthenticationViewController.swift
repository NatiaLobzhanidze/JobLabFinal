//
//  AuthenticationViewController.swift
//  JobLabFinal
//
//  Created by Natia's Mac on 02.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol AuthenticationDisplayLogic: AnyObject
{
    func displayLogIngSuccess()
    func displayLogInFailure(message: String)
    func displayRegistration(viewModel: Authentication.GoRegisterScene.ViewModel)
   
   // func tryLogIn(viewModel: Authentication.GoRegisterScene.ViewModel)
}

class AuthenticationViewController: UIViewController
{
    //MARK: Clean Components
    
  var interactor: AuthenticationBusinessLogic?
  var router: (AuthenticationRoutingLogic & AuthenticationDataPassing)?
    
    //MARK: UI

    let logoImage : UIImageView = {
        let img = UIImageView()
        img.image = UIImage(named: "logo")
        
        return img
    }()
    
    let headLineLb: UILabel = {
        let lb = UILabel()
        lb.text = "Sing in to you account"
        lb.font = .systemFont(ofSize: 20, weight: .semibold)
        lb.textAlignment = .center
        
        return lb
    }()
  
    let emailLb: UILabel = {
        let lb = UILabel()
        lb.addRequiredAsterisk(text: "   Email *")
        lb.font = .systemFont(ofSize: 14, weight: .semibold)
        
        return lb
    }()
    let emailTxFld: UITextField = {
        let txt = UITextField()
        txt.placeholder = "  Email"
        txt.format()
        txt.shadowedField()
        txt.addPaddingToTextField()
        return txt
    }()
    
    let passwordLb: UILabel = {
        let lb = UILabel()
        lb.addRequiredAsterisk(text: "   Password *")
        lb.font = .systemFont(ofSize: 14, weight: .semibold)
        return lb
    }()
    
    let passwordTxFld: UITextField = {
        let txt = UITextField()
        txt.placeholder = " Password"
        txt.format()
        txt.shadowedField()
        txt.addPaddingToTextField()
        return txt
    }()

    let signInBtn: UIButton = {
        let btn = UIButton()
        btn.setTitle("Sing in", for: .normal)
        btn.backgroundColor = hexStringToUIColor(hex: "#5180F7")
        btn.heightAnchor.constraint(equalToConstant: 43).isActive = true
        btn.layer.cornerRadius = 20
        btn.addTarget(self, action: #selector(tryLogin), for: .touchUpInside)

        return btn
    }()
  
    let orContinueLb: UILabel = {
        let lb = UILabel()
        lb.text = "or continue with"
        lb.textAlignment = .center
        lb.font = .systemFont(ofSize: 15)
        
        return lb
    }()
    
    let fbBtn: UIButton = {
        let btn = UIButton(type: .custom)
        btn.configureBtn(with: "  FaceBook", image: "fb")
        return btn
    }()
    let googleBtn: UIButton = {
        let btn = UIButton()
        btn.configureBtn(with: "  Google", image: "32")
        return btn
    }()
    
    let donthaveAn: UILabel = {
        let lb = UILabel()
        lb.text = "Don't have an account?"
        lb.textAlignment = .right
        lb.font = .systemFont(ofSize: 15)
        
        return lb
    }()
    
    let signUp: UIButton = {
        
        let btn = UIButton()
        btn.setTitle("SignUp", for: .normal)
        btn.setTitleColor(hexStringToUIColor(hex: "#5180F7"), for: .normal)
        btn.titleLabel?.font = .systemFont(ofSize: 15)
        btn.addTarget(self, action: #selector(goToRegistration), for: .touchUpInside)

        return btn
    }()
    
  // MARK: Object lifecycle
    
    init(interactor: AuthenticationBusinessLogic, router: (AuthenticationRoutingLogic & AuthenticationDataPassing)) {
        self.interactor = interactor
        self.router = router
        super.init(nibName: nil, bundle: nil)
    }

  
  required init?(coder aDecoder: NSCoder)
  {
      fatalError("init(coder:) has not been implemented")
  }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
      super.viewDidLoad()
        view.backgroundColor = .white
        setUpView()
    
    }
  
  // MARK: @objc Methods
  
    @objc func goToRegistration() {
        interactor?.getRegistrationScene(request: Authentication.GoRegisterScene.Request())
    }
  

  
  // MARK: Do something
  
    
//    @objc func logInButtonAction() {
//     
//        interactor?.tryLogIn(request: Authentication.LoginAction.Request(email: emailTxFld, password: passwordTxFld))
//        
//    }
    private func setUpView() {
        let textFieldsArr: [UITextField] = [emailTxFld, passwordTxFld]
        let labelarr: [UILabel]  = [emailLb, passwordLb, headLineLb, orContinueLb, donthaveAn ]
        let btnArr: [UIButton] = [signInBtn,fbBtn, googleBtn, signUp]
        let scrollView = UIScrollView()
            scrollView.isScrollEnabled = true
        let contentView = UIView()
        self.addConstreintsToScrollView(scrollView: scrollView, contentView: contentView)
        self.addConstraintsToImage(contentView: contentView, logoImage: self.logoImage)
        self.addHeadLine(contentView: contentView, headLineLb: self.headLineLb, logoImage: self.logoImage)
        self.addFirstStackview(textLb: labelarr, textFld: textFieldsArr, btn: btnArr, contentView: contentView)
    }
    
    
 @objc func tryLogin()
  {
//      guard let email = emailTxFld.text, let password = passwordTxFld.text else { return }
//      let request = Authentication.LoginAction.Request(email: email, password: password)
      interactor?.tryLogIn(request: Authentication.LoginAction.Request(mailTextField: emailTxFld, passwordTexfield: passwordTxFld))
//      print(email, password)
    //  filterSheetCall()
    
  }
    
    func filterSheetCall() {
        let filterVC = BottomSheetViewController()
        filterVC.modalPresentationStyle = .custom
      
        filterVC.transitioningDelegate = self
    //    router?.navigateToSomewhere(destination: filterVC)
      
    }
 
}
//MARK: DisplayLogic Methods

extension AuthenticationViewController :   AuthenticationDisplayLogic {
//    func displayCategoriesScene() {
//    }
    
    func displayLogIngSuccess() {
        router?.navigateToCategoriesScene()
    }
    
    func displayLogInFailure(message: String) {
        self.showAlert(alertText: "Eroor while log in", alertMessage: message, addActionTitle: "Ok")
    }
    

    func displayRegistration(viewModel: Authentication.GoRegisterScene.ViewModel) {
        router?.navigationToRegistration()
    }
    
   
}

extension AuthenticationViewController :  UIViewControllerTransitioningDelegate {
  
    func presentationController(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController) -> UIPresentationController? {
        FilterPresentationController(presentedViewController: presented, presenting: presenting)
    }
}
